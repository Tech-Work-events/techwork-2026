---
import { ClientRouter } from 'astro:transitions'
import FooterBlock from '../components/footer/FooterBlock.astro'
import Menu from '../components/Menu.astro'
import '../styles/global.css'

interface Props {
    title: string
    description?: string
    metaImage?: string | null
}

const { title, description, metaImage } = Astro.props
const url = import.meta.env.SITE
const image = metaImage || url + '/social-share.png'
const siteName = 'Tech\'Work Lyon'
const pageTitle = title || siteName
const siteNameWithTagline = 'Tech\'Work Lyon 2026 - L\'afterwork IT sur votre temps de travail'
const fullPageTitle = title ? `${title} | ${siteName}` : siteNameWithTagline
const pageDescription =
    description ||
    'Tech\'Work Lyon est l\'événement tech révolutionnaire qui se déroule sur temps de travail. Développeurs, DevOps, Data Scientists : rejoignez-nous en juin 2026 pour une journée qui respecte votre work-life balance.'
const keywords = 'techwork, tech work, événement, event, lyon, programming, développeur, devops, data science, conférence, work-life balance, afterwork'

const organizerName = 'Tech\'Work Lyon'
const organizerTwitter = '@techworklyon'
---

<!doctype html>
<html lang="fr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="index, follow" />

        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

        <link href="manifest.json" rel="manifest" />

        <!-- Add to homescreen for Chrome on Android -->
        <meta content="yes" name="mobile-web-app-capable" />
        <meta name="generator" content={Astro.generator} />

        <!-- fallback for manifest.json -->
        <meta content={siteName} name="application-name" />

        <!-- Add to homescreen for Safari on iOS -->
        <meta content="yes" name="apple-mobile-web-app-capable" />
        <meta content="black-translucent" name="apple-mobile-web-app-status-bar-style" />
        <meta content={siteName} name="apple-mobile-web-app-title" />

        <meta content={pageDescription} name="description" />
        <meta content={keywords} name="keywords" />
        <meta content={organizerName} name="author" />

        <!-- Facebook sharing meta data -->
        <meta content={pageTitle} property="og:title" />
        <meta content={siteNameWithTagline} property="og:site_name" />
        <meta content="website" property="og:type" />
        <meta content={url} property="og:url" />
        <meta content={pageDescription} property="og:description" />
        <meta content="fr" property="og:locale" />
        <meta content={image} property="og:image" />
        <meta content="image/jpeg" property="og:image:type" />

        <!-- Twitter meta data -->
        <meta content="summary_large_image" name="twitter:card" />
        <meta content={organizerTwitter} name="twitter:site" />
        <meta content={pageTitle} name="twitter:title" />
        <meta content={pageDescription} name="twitter:description" />
        <meta content={image} name="twitter:image" />

        <title>{fullPageTitle}</title>

        <slot name="head" />

        <script defer data-domain="cloudnord.fr" src="https://plausible.gresse.io/js/script.js"></script>
        <ClientRouter />
    </head>
    <body class="antialiased">
        <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-primary-600 text-white px-4 py-2 z-50">Aller au contenu principal</a>
        <Menu />
        <main id="#main-content">
            <slot />
        </main>

        <FooterBlock />
        
        <!-- Script optimisé pour les animations au scroll -->
        <script>
            // Détection du type d'appareil
            const isMobile = () => window.innerWidth <= 768;
            const isVerySmall = () => window.innerWidth <= 480;
            const prefersReducedMotion = () => window.matchMedia('(prefers-reduced-motion: reduce)').matches;

            // Configuration des animations selon l'appareil
            const getAnimationConfig = () => {
                if (isVerySmall() || prefersReducedMotion()) {
                    return {
                        enabled: false,
                        duration: 0,
                        threshold: 0.1
                    };
                }
                
                if (isMobile()) {
                    return {
                        enabled: true,
                        duration: 0.5,
                        threshold: 0.2
                    };
                }
                
                return {
                    enabled: true,
                    duration: 0.8,
                    threshold: 0.1
                };
            };

            // Optimisation des animations au scroll
            class ScrollAnimationOptimizer {
                constructor() {
                    this.config = getAnimationConfig();
                    this.observers = new Map();
                    this.animatedElements = new Set();
                    this.isScrolling = false;
                    this.scrollTimer = null;
                    
                    this.init();
                }
                
                init() {
                    if (!this.config.enabled) {
                        this.disableAllAnimations();
                        return;
                    }
                    
                    this.setupIntersectionObserver();
                    this.setupScrollOptimization();
                    this.setupResizeHandler();
                    this.optimizeExistingAnimations();
                    this.initHoverAnimations();
                    this.initParallax();
                    this.staggerAnimations();
                }
                
                setupIntersectionObserver() {
                    const observerOptions = {
                        root: null,
                        rootMargin: '50px',
                        threshold: this.config.threshold
                    };
                    
                    this.observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                this.activateAnimation(entry.target);
                            }
                        });
                    }, observerOptions);
                    
                    this.observeAnimatedElements();
                }
                
                observeAnimatedElements() {
                    const animatedElements = document.querySelectorAll(`
                        .scroll-animate,
                        .scroll-animate-left,
                        .scroll-animate-right,
                        .scroll-animate-scale,
                        .text-blocks
                    `);
                    
                    animatedElements.forEach(element => {
                        this.observer.observe(element);
                    });
                }
                
                activateAnimation(element) {
                    if (this.animatedElements.has(element)) return;
                    
                    // Ajouter will-change avant l'animation
                    element.style.willChange = 'transform, opacity';
                    
                    // Activer l'animation
                    if (element.classList.contains('text-blocks')) {
                        element.classList.add('visible');
                    } else {
                        element.classList.add('animate');
                    }
                    this.animatedElements.add(element);
                    
                    // Nettoyer will-change après l'animation
                    setTimeout(() => {
                        element.style.willChange = 'auto';
                        element.classList.add('animation-complete');
                    }, this.config.duration * 1000 + 100);
                    
                    // Arrêter d'observer cet élément
                    this.observer.unobserve(element);
                }
                
                setupScrollOptimization() {
                    let ticking = false;
                    
                    const handleScroll = () => {
                        if (!ticking) {
                            requestAnimationFrame(() => {
                                this.onScroll();
                                ticking = false;
                            });
                            ticking = true;
                        }
                    };
                    
                    window.addEventListener('scroll', handleScroll, { passive: true });
                }
                
                onScroll() {
                    this.isScrolling = true;
                    
                    // Réduire les animations pendant le scroll
                    if (isMobile()) {
                        document.body.classList.add('scrolling');
                    }
                    
                    // Nettoyer le timer précédent
                    if (this.scrollTimer) {
                        clearTimeout(this.scrollTimer);
                    }
                    
                    // Restaurer les animations après le scroll
                    this.scrollTimer = setTimeout(() => {
                        this.isScrolling = false;
                        document.body.classList.remove('scrolling');
                    }, 150);
                }
                
                setupResizeHandler() {
                    let resizeTimer = null;
                    
                    window.addEventListener('resize', () => {
                        clearTimeout(resizeTimer);
                        resizeTimer = setTimeout(() => {
                            this.config = getAnimationConfig();
                            
                            if (!this.config.enabled) {
                                this.disableAllAnimations();
                            }
                        }, 250);
                    });
                }
                
                optimizeExistingAnimations() {
                    // Optimiser les animations infinies sur mobile
                    if (isMobile()) {
                        const infiniteAnimations = document.querySelectorAll(`
                            .animate-bounce-gentle,
                            .animate-float,
                            .animate-pulse-slow,
                            .animate-gradient
                        `);
                        
                        infiniteAnimations.forEach(element => {
                            element.style.willChange = 'transform';
                            
                            // Réduire la fréquence d'animation
                            if (element.classList.contains('animate-bounce-gentle')) {
                                element.style.animationDuration = '3s';
                            } else if (element.classList.contains('animate-float')) {
                                element.style.animationDuration = '4s';
                            } else if (element.classList.contains('animate-gradient')) {
                                element.style.animationDuration = '8s';
                            }
                        });
                    }
                }
                
                // Animations de hover avancées
                initHoverAnimations() {
                    if (isMobile()) return; // Pas d'animations hover sur mobile
                    
                    const hoverElements = document.querySelectorAll('.hover-lift');
                    
                    hoverElements.forEach(el => {
                        if (el instanceof HTMLElement) {
                            el.addEventListener('mouseenter', () => {
                                el.style.transform = 'translate3d(0, -8px, 0) scale(1.02)';
                                el.style.boxShadow = '0 20px 40px rgba(0,0,0,0.15)';
                            });
                            
                            el.addEventListener('mouseleave', () => {
                                el.style.transform = 'translate3d(0, 0, 0) scale(1)';
                                el.style.boxShadow = '';
                            });
                        }
                    });
                }

                // Parallax doux pour les éléments
                initParallax() {
                    if (isMobile()) return; // Pas de parallax sur mobile
                    
                    const parallaxElements = document.querySelectorAll('.parallax');
                    
                    if (parallaxElements.length > 0) {
                        window.addEventListener('scroll', () => {
                            const scrolled = window.scrollY;
                            
                            parallaxElements.forEach(el => {
                                if (el instanceof HTMLElement) {
                                    const speed = parseFloat(el.dataset.speed || '0.5');
                                    const yPos = -(scrolled * speed);
                                    el.style.transform = `translate3d(0, ${yPos}px, 0)`;
                                }
                            });
                        });
                    }
                }

                // Animations séquentielles pour les grilles et listes
                staggerAnimations() {
                    const grids = document.querySelectorAll('.stagger-children');
                    
                    grids.forEach(grid => {
                        const children = grid.children;
                        Array.from(children).forEach((child, index) => {
                            if (child instanceof HTMLElement) {
                                child.style.animationDelay = `${index * 0.1}s`;
                            }
                        });
                    });
                }
                
                disableAllAnimations() {
                    // Désactiver toutes les animations
                    const animatedElements = document.querySelectorAll(`
                        .scroll-animate,
                        .scroll-animate-left,
                        .scroll-animate-right,
                        .scroll-animate-scale,
                        .animate-bounce-gentle,
                        .animate-float,
                        .animate-pulse-slow,
                        .animate-gradient,
                        .text-blocks > .text-block
                    `);
                    
                    animatedElements.forEach(element => {
                        element.style.animation = 'none';
                        element.style.transition = 'none';
                        element.style.transform = 'none';
                        element.style.opacity = '1';
                        element.style.willChange = 'auto';
                    });
                    
                    // Activer immédiatement tous les éléments scroll-animate
                    document.querySelectorAll('.scroll-animate, .scroll-animate-left, .scroll-animate-right, .scroll-animate-scale').forEach(element => {
                        element.classList.add('animate');
                    });
                }
            }

            // Ajouter les styles d'optimisation pour le scroll
            const scrollPerformanceCSS = `
                .scrolling .hover-lift:hover {
                    transform: none !important;
                    transition: none !important;
                }
                
                .scrolling .animate-bounce-gentle,
                .scrolling .animate-float {
                    animation-play-state: paused !important;
                }
            `;

            const styleSheet = document.createElement('style');
            styleSheet.textContent = scrollPerformanceCSS;
            document.head.appendChild(styleSheet);

            // Initialiser l'optimiseur
            function initAnimationOptimizer() {
                new ScrollAnimationOptimizer();
            }

            // Initialisation
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initAnimationOptimizer);
            } else {
                initAnimationOptimizer();
            }

            // Réinitialiser après navigation Astro
            document.addEventListener('astro:page-load', () => {
                setTimeout(initAnimationOptimizer, 100);
            });

            // Nettoyer les will-change pour éviter les fuites mémoire
            window.addEventListener('beforeunload', () => {
                document.querySelectorAll('*[style*="will-change"]').forEach(element => {
                    element.style.willChange = 'auto';
                });
            });
        </script>
    </body>
</html>
