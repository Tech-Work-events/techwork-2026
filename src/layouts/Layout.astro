---
import { ClientRouter } from 'astro:transitions'
import FooterBlock from '../components/footer/FooterBlock.astro'
import Menu from '../components/Menu.astro'
import CookieConsent from '../components/legal/CookieConsent.astro'
import StickyCTA from '../components/cta/StickyCTA.astro'

import '../styles/global.css'

interface Props {
    title: string
    description?: string
    metaImage?: string | null
    robots?: string
}

const { title, description, metaImage, robots } = Astro.props
const url = import.meta.env.SITE
const canonical = new URL(Astro.url.pathname, url).href
const shareImage = metaImage || url + '/social-share.png'
const siteName = "Tech'Work Lyon"
const pageTitle = title || siteName
const siteNameWithTagline = "Tech'Work Lyon 2026 - L'afterwork IT sur votre temps de travail"
const fullPageTitle = title ? `${title} | ${siteName}` : siteNameWithTagline
const pageDescription =
    description ||
    "Tech'Work Lyon est l'événement tech révolutionnaire qui se déroule sur temps de travail. Développeurs, DevOps, Data Scientists : rejoignez-nous en juin 2026 pour une journée qui respecte votre work-life balance."
const keywords =
    'techwork, tech work, événement, event, lyon, programming, développeur, devops, data science, conférence, work-life balance, afterwork'

const organizerName = "Tech'Work Lyon"
const organizerTwitter = '@techworklyon'
const GA_ID = import.meta.env.PUBLIC_GA_ID
---

<!doctype html>
<html lang="fr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content={robots || 'index, follow'} />

        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

        <link rel="canonical" href={canonical} />

        <link href="/manifest.json" rel="manifest" />
        <!-- Performance hints -->
        <!-- Analytics performance hints -->
        <link rel="preconnect" href="https://www.googletagmanager.com" />
        <link rel="preconnect" href="https://www.google-analytics.com" />
        <link rel="dns-prefetch" href="//www.googletagmanager.com" />
        <link rel="dns-prefetch" href="//www.google-analytics.com" />
        <!-- Font performance hints -->
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link rel="dns-prefetch" href="//fonts.googleapis.com" />
        <link rel="dns-prefetch" href="//fonts.gstatic.com" />

        <!-- Add to homescreen for Chrome on Android -->
        <meta content="yes" name="mobile-web-app-capable" />
        <meta name="generator" content={Astro.generator} />

        <!-- fallback for manifest.json -->
        <meta content={siteName} name="application-name" />

        <!-- Add to homescreen for Safari on iOS -->
        <meta content="yes" name="apple-mobile-web-app-capable" />
        <meta content="black-translucent" name="apple-mobile-web-app-status-bar-style" />
        <meta content={siteName} name="apple-mobile-web-app-title" />

        <meta content={pageDescription} name="description" />
        <meta content={keywords} name="keywords" />
        <meta content={organizerName} name="author" />

        <!-- Facebook sharing meta data -->
        <meta content={pageTitle} property="og:title" />
        <meta content={siteNameWithTagline} property="og:site_name" />
        <meta content="website" property="og:type" />
        <meta content={canonical} property="og:url" />
        <meta content={pageDescription} property="og:description" />
        <meta content="fr" property="og:locale" />
        <meta content={shareImage} property="og:image" />
        <meta content="image/png" property="og:image:type" />
        <meta content="1200" property="og:image:width" />
        <meta content="630" property="og:image:height" />
        <meta content="Lama Tech'Work Lyon" property="og:image:alt" />
        <!-- PNG fallback for platforms not supporting SVG in OG -->
        <meta content={url + '/social-share.png'} property="og:image" />

        <!-- Twitter meta data -->
        <meta content="summary_large_image" name="twitter:card" />
        <meta content={organizerTwitter} name="twitter:site" />
        <meta content={pageTitle} name="twitter:title" />
        <meta content={pageDescription} name="twitter:description" />
        <meta content={shareImage} name="twitter:image" />

        <title>{fullPageTitle}</title>

        <slot name="head" />

        {
            GA_ID && (
                <>
                    <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_ID}`} />
                    <script is:inline>
                        {`
                        window.dataLayer = window.dataLayer || [];
                        function gtag(){dataLayer.push(arguments);}
                        gtag('js', new Date());
                        gtag('config', '${GA_ID}', { anonymize_ip: true });
                    `}
                    </script>
                </>
            )
        }
        <ClientRouter />
    </head>
    <body class="antialiased">
        <a href="#main-content" class="skip-link">Aller au contenu principal</a>
        <Menu />
        <main id="main-content">
            <slot />
        </main>

        <FooterBlock />

        <!-- Sticky CTA (mobile/tablet) -->
        <StickyCTA />

        <!-- Gestion des cookies RGPD -->
        <CookieConsent />

        <!-- Script optimisé pour les animations au scroll -->
        <script>
            // Détection du type d'appareil
            const isMobile = () => window.innerWidth <= 768
            const isVerySmall = () => window.innerWidth <= 480
            const prefersReducedMotion = () => window.matchMedia('(prefers-reduced-motion: reduce)').matches

            // Configuration des animations selon l'appareil
            const getAnimationConfig = () => {
                if (isVerySmall() || prefersReducedMotion()) {
                    return {
                        enabled: false,
                        duration: 0,
                        threshold: 0.1,
                    }
                }

                if (isMobile()) {
                    return {
                        enabled: true,
                        duration: 0.5,
                        threshold: 0.2,
                    }
                }

                return {
                    enabled: true,
                    duration: 0.8,
                    threshold: 0.1,
                }
            }

            type AnimationConfig = ReturnType<typeof getAnimationConfig>

            // Optimisation des animations au scroll
            class ScrollAnimationOptimizer {
                private config: AnimationConfig
                private animatedElements: Set<HTMLElement>
                private scrollTimer: ReturnType<typeof setTimeout> | null
                private observer!: IntersectionObserver

                constructor() {
                    this.config = getAnimationConfig()
                    this.animatedElements = new Set()
                    this.scrollTimer = null

                    this.init()
                }

                init() {
                    if (!this.config.enabled) {
                        this.disableAllAnimations()
                        return
                    }

                    this.setupIntersectionObserver()
                    this.setupScrollOptimization()
                    this.setupResizeHandler()
                    this.optimizeExistingAnimations()
                    this.initHoverAnimations()
                    this.initParallax()
                    this.staggerAnimations()
                }

                setupIntersectionObserver() {
                    const observerOptions = {
                        root: null,
                        rootMargin: '50px',
                        threshold: this.config.threshold,
                    }

                    this.observer = new IntersectionObserver((entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting && entry.target instanceof HTMLElement) {
                                this.activateAnimation(entry.target)
                            }
                        })
                    }, observerOptions)

                    this.observeAnimatedElements()
                }

                observeAnimatedElements() {
                    const animatedElements = document.querySelectorAll(`
                        .scroll-animate,
                        .scroll-animate-left,
                        .scroll-animate-right,
                        .scroll-animate-scale,
                        .text-blocks
                    `)

                    animatedElements.forEach((element) => {
                        this.observer.observe(element)
                        if (element instanceof HTMLElement) {
                            this.activateAnimation(element)
                        }
                    })
                }

                activateAnimation(element: HTMLElement) {
                    if (this.animatedElements.has(element)) return

                    // Ajouter will-change avant l'animation
                    element.style.willChange = 'transform, opacity'

                    // Activer l'animation
                    if (element.classList.contains('text-blocks')) {
                        element.classList.add('visible')
                    } else {
                        element.classList.add('animate')
                    }
                    this.animatedElements.add(element)

                    // Nettoyer will-change après l'animation
                    setTimeout(
                        () => {
                            element.style.willChange = 'auto'
                            element.classList.add('animation-complete')
                        },
                        this.config.duration * 1000 + 100
                    )

                    // Arrêter d'observer cet élément
                    this.observer.unobserve(element)
                }

                setupScrollOptimization() {
                    let ticking = false

                    const handleScroll = () => {
                        if (!ticking) {
                            requestAnimationFrame(() => {
                                this.onScroll()
                                ticking = false
                            })
                            ticking = true
                        }
                    }

                    window.addEventListener('scroll', handleScroll, { passive: true })
                }

                onScroll() {
                    // Réduire les animations pendant le scroll
                    if (isMobile()) {
                        document.body.classList.add('scrolling')
                    }

                    // Nettoyer le timer précédent
                    if (this.scrollTimer) {
                        clearTimeout(this.scrollTimer)
                    }

                    // Restaurer les animations après le scroll
                    this.scrollTimer = setTimeout(() => {
                        document.body.classList.remove('scrolling')
                    }, 150)
                }

                setupResizeHandler() {
                    let resizeTimer: ReturnType<typeof setTimeout> | null = null

                    window.addEventListener('resize', () => {
                        if (resizeTimer) {
                            clearTimeout(resizeTimer)
                        }
                        resizeTimer = setTimeout(() => {
                            this.config = getAnimationConfig()

                            if (!this.config.enabled) {
                                this.disableAllAnimations()
                            }
                        }, 250)
                    })
                }

                optimizeExistingAnimations() {
                    // Optimiser les animations infinies sur mobile
                    if (isMobile()) {
                        const infiniteAnimations = document.querySelectorAll(`
                            .animate-bounce-gentle,
                            .animate-float,
                            .animate-pulse-slow,
                            .animate-gradient
                        `) as NodeListOf<HTMLElement>

                        infiniteAnimations.forEach((element) => {
                            element.style.willChange = 'transform'

                            // Réduire la fréquence d'animation
                            if (element.classList.contains('animate-bounce-gentle')) {
                                element.style.animationDuration = '3s'
                            } else if (element.classList.contains('animate-float')) {
                                element.style.animationDuration = '4s'
                            } else if (element.classList.contains('animate-gradient')) {
                                element.style.animationDuration = '8s'
                            }
                        })
                    }
                }

                // Animations de hover avancées
                initHoverAnimations() {
                    if (isMobile()) return // Pas d'animations hover sur mobile

                    const hoverElements = document.querySelectorAll('.hover-lift')

                    hoverElements.forEach((el) => {
                        if (el instanceof HTMLElement) {
                            el.addEventListener('mouseenter', () => {
                                el.style.transform = 'translate3d(0, -8px, 0) scale(1.02)'
                                el.style.boxShadow = '0 20px 40px rgba(0,0,0,0.15)'
                            })

                            el.addEventListener('mouseleave', () => {
                                el.style.transform = 'translate3d(0, 0, 0) scale(1)'
                                el.style.boxShadow = ''
                            })
                        }
                    })
                }

                // Parallax doux pour les éléments
                initParallax() {
                    if (isMobile()) return // Pas de parallax sur mobile

                    const parallaxElements = document.querySelectorAll('.parallax')

                    if (parallaxElements.length > 0) {
                        window.addEventListener('scroll', () => {
                            const scrolled = window.scrollY

                            parallaxElements.forEach((el) => {
                                if (el instanceof HTMLElement) {
                                    const speed = parseFloat(el.dataset.speed || '0.5')
                                    const yPos = -(scrolled * speed)
                                    el.style.transform = `translate3d(0, ${yPos}px, 0)`
                                }
                            })
                        })
                    }
                }

                // Animations séquentielles pour les grilles et listes
                staggerAnimations() {
                    const grids = document.querySelectorAll('.stagger-children')

                    grids.forEach((grid) => {
                        const children = grid.children
                        Array.from(children).forEach((child, index) => {
                            if (child instanceof HTMLElement) {
                                child.style.animationDelay = `${index * 0.1}s`
                            }
                        })
                    })
                }

                disableAllAnimations() {
                    // Désactiver toutes les animations
                    const animatedElements = document.querySelectorAll(`
                        .scroll-animate,
                        .scroll-animate-left,
                        .scroll-animate-right,
                        .scroll-animate-scale,
                        .animate-bounce-gentle,
                        .animate-float,
                        .animate-pulse-slow,
                        .animate-gradient,
                        .text-blocks > .text-block
                    `) as NodeListOf<HTMLElement>

                    animatedElements.forEach((element) => {
                        element.style.animation = 'none'
                        element.style.transition = 'none'
                        element.style.transform = 'none'
                        element.style.opacity = '1'
                        element.style.willChange = 'auto'
                    })

                    // Activer immédiatement tous les éléments scroll-animate
                    document
                        .querySelectorAll(
                            '.scroll-animate, .scroll-animate-left, .scroll-animate-right, .scroll-animate-scale'
                        )
                        .forEach((element) => {
                            element.classList.add('animate')
                        })
                }
            }

            // Ajouter les styles d'optimisation pour le scroll
            const scrollPerformanceCSS = `
                .scrolling .hover-lift:hover {
                    transform: none !important;
                    transition: none !important;
                }

                .scrolling .animate-bounce-gentle,
                .scrolling .animate-float {
                    animation-play-state: paused !important;
                }
            `

            const styleSheet = document.createElement('style')
            styleSheet.textContent = scrollPerformanceCSS
            document.head.appendChild(styleSheet)

            // Initialiser l'optimiseur
            function initAnimationOptimizer() {
                new ScrollAnimationOptimizer()
            }

            // Initialisation
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initAnimationOptimizer)
            } else {
                initAnimationOptimizer()
            }

            // Réinitialiser après navigation Astro
            document.addEventListener('astro:page-load', () => {
                setTimeout(initAnimationOptimizer, 100)
            })

            // Nettoyer les will-change pour éviter les fuites mémoire
            window.addEventListener('beforeunload', () => {
                ;(document.querySelectorAll('*[style*="will-change"]') as NodeListOf<HTMLElement>).forEach(
                    (element) => {
                        element.style.willChange = 'auto'
                    }
                )
            })
        </script>

        <!-- Shared smooth-scroll for anchors with data-smooth-scroll -->
        <script>
            // @ts-nocheck
            ;(function () {
                const DURATION = 900
                const prefersReduced = () =>
                    window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches
                const easing = (t) => (t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2)
                const getHeaderOffset = () => {
                    const header = document.getElementById('site-header')
                    return header ? header.offsetHeight : 0
                }

                function smoothScrollTo(y, duration = DURATION) {
                    if (prefersReduced()) {
                        window.scrollTo(0, y)
                        return
                    }
                    const startY = window.scrollY
                    const distance = y - startY
                    if (distance === 0) return
                    let startTime = null
                    function step(ts) {
                        if (startTime === null) startTime = ts
                        const elapsed = ts - startTime
                        const p = Math.min(elapsed / duration, 1)
                        const e = easing(p)
                        window.scrollTo(0, startY + distance * e)
                        if (elapsed < duration) requestAnimationFrame(step)
                    }
                    requestAnimationFrame(step)
                }

                function onSmoothClick(e) {
                    const link = e.currentTarget
                    if (!(link instanceof HTMLAnchorElement)) return
                    const hash = link.hash
                    if (!hash || !hash.startsWith('#')) return
                    const id = decodeURIComponent(hash.slice(1))
                    const target = document.getElementById(id)
                    if (!target) return
                    e.preventDefault()
                    const y = Math.max(0, target.getBoundingClientRect().top + window.scrollY - getHeaderOffset())
                    smoothScrollTo(y)
                }

                function bindSmoothLinks() {
                    document.querySelectorAll('a[data-smooth-scroll]').forEach((el) => {
                        el.removeEventListener('click', onSmoothClick)
                        el.addEventListener('click', onSmoothClick)
                    })
                }

                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', bindSmoothLinks)
                } else {
                    bindSmoothLinks()
                }
                document.addEventListener('astro:page-load', () => setTimeout(bindSmoothLinks, 0))
            })()
        </script>
    </body>
</html>
