---
import { OPENPLANNER_URL } from 'astro:env/client'
import { Markdown } from '@astropub/md'
import { markdownToTxt } from 'markdown-to-txt'
import type { OpenPlannerType } from '../../type'
import MarkdownWrapper from '../../components/ui-elements/MarkdownWrapper.astro'
import Cluster from '../../components/ui-elements/Cluster.astro'
import Stack from '../../components/ui-elements/Stack.astro'
import Chip from '../../components/ui-elements/Chip.astro'
import LayoutWithTitle from '../../layouts/LayoutWithTitle.astro'
import Speaker from '../../components/schedule/Speaker.astro'

export async function getStaticPaths() {
    const response = await fetch(OPENPLANNER_URL)
    const openPlannerData: OpenPlannerType = await response.json()

    const { speakers, sessions, event } = openPlannerData
    const { categories, tracks } = event

    const uniqueDays = sessions.reduce((acc, session) => {
        if (session.dateStart && session.trackId) {
            const date = new Date(session.dateStart)
            date.setHours(0, 0, 0, 0)
            const timestamp = date.getTime()
            if (!acc.has(timestamp)) {
                acc.add(timestamp)
            }
        }
        return acc
    }, new Set<number>())
    const sortedDays = Array.from(uniqueDays.values()).sort()

    return sessions.map((session) => {
        const date = session.dateStart ? new Date(session.dateStart) : new Date()
        date.setHours(0, 0, 0, 0)
        const timestamp = date.getTime()

        return {
            params: { slug: session.id },
            props: {
                ...session,
                parentUrl: `/schedule/day-${sortedDays.indexOf(timestamp) + 1}`,
                speakers: speakers.filter((speaker) => session.speakerIds.includes(speaker.id)),
                category: categories.find((cat) => cat.id === session.categoryId),
                track: tracks.find((track) => track.id === session.trackId),
            },
        }
    })
}

const {
    title,
    track,
    abstract,
    category,
    level,
    speakers,
    dateStart,
    dateEnd,
    durationMinutes,
    parentUrl,
    teaserImageUrl,
    hideTrackTitle,
} = Astro.props

const rawAbstract = abstract ? markdownToTxt(abstract) : undefined
const metaDescription = rawAbstract ? rawAbstract?.split('\n')?.[0] : undefined
---

<LayoutWithTitle
    htmlTitle={`${title} – ${speakers.map((speaker) => speaker.name).join(', ')}`}
    title={title}
    metaImage={teaserImageUrl}
    metaDescription={metaDescription}>
    <div slot="subtitle">
        <a href={parentUrl} style={{ textDecoration: 'none', color: 'var(--brand-solid)' }}>
            <Cluster space="var(--s-2)" align="center">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"
                    ><path fill="currentColor" d="M20 11v2H8l5.5 5.5l-1.42 1.42L4.16 12l7.92-7.92L13.5 5.5L8 11z"
                    ></path></svg
                >
                <span>Programme</span>
            </Cluster>
        </a>
    </div>
    <div slot="description">
        <Stack>
            <div class="fs1">
                {dateStart && new Date(dateStart).toLocaleString('fr', { dateStyle: 'full' })}, de {
                    dateStart && new Date(dateStart).toLocaleString('fr', { timeStyle: 'short' })
                }
                à {dateEnd && new Date(dateEnd).toLocaleString('fr', { timeStyle: 'short' })}
                ({durationMinutes} min)
            </div>
            {track && !hideTrackTitle && <div class="fw-bold">Salle : {track.name}</div>}
            <Stack>
                {
                    speakers.map((speaker) => (
                        <Speaker
                            id={speaker.id}
                            photoUrl={speaker.photoUrl}
                            name={speaker.name}
                            company={speaker.company}
                        />
                    ))
                }
            </Stack>
        </Stack>
    </div>

    {
        category && (
            <div>
                <Chip color={category.color} size="lg">
                    {category.name}
                </Chip>
                <Chip size="lg" inverse>
                    {level}
                </Chip>
            </div>
        )
    }

    {
        abstract && (
            <MarkdownWrapper>
                <Markdown of={abstract} />
            </MarkdownWrapper>
        )
    }
</LayoutWithTitle>
