---
import type { Category, Speaker, Track } from '../../type'
import Chip from '../ui-elements/Chip.astro'
import Cluster from '../ui-elements/Cluster.astro'
import Stack from '../ui-elements/Stack.astro'
import SpeakerComponent from './Speaker.astro'

interface Props {
    id: string
    title: string
    dateStart?: string
    durationMinutes?: number
    track?: Track
    category?: Category
    speakers: Speaker[]
}

const { id, title, dateStart, durationMinutes, track, category, speakers } = Astro.props
---

<div class="schedule-session" data-session-id={id}>
    <Stack style={{ height: '100%' }} space="var(--s-2)">
        <h3 class="fw-medium fs1"><a href={`/sessions/${id}`}>{title}</a></h3>
        <div class="schedule-session-extra-info">
            <div class="schedule-session-date">
                {
                    dateStart && (
                        <strong>
                            {new Date(dateStart).toLocaleString('fr', { dateStyle: 'long', timeStyle: 'short' })}
                        </strong>
                    )
                } â€“{' '}
                {durationMinutes} min
            </div>
            {track && <div class="schedule-session-track">Salle : {track.name}</div>}
        </div>
        <div style={{ marginTop: 'auto', paddingTop: 'var(--s0)' }}>
            <Stack space="var(--s-2)">
                {
                    speakers && speakers.length > 0 && (
                        <div>
                            <Cluster space="var(--s-2)">
                                {speakers.map((speaker) => (
                                    <SpeakerComponent
                                        size="sm"
                                        id={speaker.id}
                                        photoUrl={speaker.photoUrl}
                                        name={speaker.name}
                                        company={speaker.company}
                                    />
                                ))}
                            </Cluster>
                        </div>
                    )
                }
                {
                    category && (
                        <div>
                            <Chip color={category.color} size="sm">
                                {category.name}
                            </Chip>
                        </div>
                    )
                }
            </Stack>
        </div>

        <session-item-bookmark data-session-id={id}>
            <button class="schedule-session-save-button" type="button">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                    ><path
                        fill="currentColor"
                        d="m17 18l-5-2.18L7 18V5h10m0-2H7a2 2 0 0 0-2 2v16l7-3l7 3V5a2 2 0 0 0-2-2"></path></svg
                >
            </button>
        </session-item-bookmark>
    </Stack>
</div>

<script>
    import {
        Firestore,
        getFirestore,
        setDoc,
        doc,
        updateDoc,
        arrayUnion,
        arrayRemove,
        getDoc,
    } from 'firebase/firestore/lite'
    import { getAuth, onAuthStateChanged, type Auth, type User } from 'firebase/auth'
    import { app } from '../../firebase/client'
    import { signIn } from '../../firebase/auth'

    class SessionItemBookmark extends HTMLElement {
        db: Firestore
        auth: Auth
        user: User | null

        notSavedIconPath: string
        savedIconPath: string

        constructor() {
            super()

            this.db = getFirestore(app)
            this.auth = getAuth(app)
            this.user = this.auth.currentUser

            this.notSavedIconPath = 'm17 18l-5-2.18L7 18V5h10m0-2H7a2 2 0 0 0-2 2v16l7-3l7 3V5a2 2 0 0 0-2-2'
            this.savedIconPath =
                'M17 3a2 2 0 0 1 2 2v16l-7-3l-7 3V5a2 2 0 0 1 2-2zm-6 11l6.25-6.24l-1.41-1.42L11 11.18L8.41 8.59L7 10z'
        }

        connectedCallback() {
            this.setInitialState()
            this.querySelector('button')?.addEventListener('click', this.handleToggleBookmark.bind(this))

            onAuthStateChanged(this.auth, (user) => {
                this.user = user
                this.setInitialState()
            })
        }

        async setInitialState() {
            if (await this.isSessionSaved()) {
                this.dataset.saved = 'true'
                this.setIcon(true)
            } else {
                this.dataset.saved = 'false'
                this.setIcon(false)
            }
        }

        setIcon(isSaved: boolean) {
            this.querySelector('svg path')?.setAttribute('d', isSaved ? this.savedIconPath : this.notSavedIconPath)
        }

        async handleToggleBookmark(evt: MouseEvent) {
            evt.preventDefault()
            evt.stopPropagation()

            if (!this.user) {
                console.warn('User is not authenticated, try to sign in')

                const user = await signIn()

                if (user) {
                    this.user = user
                } else {
                    console.error('User is not authenticated')
                    return
                }
            }

            // Optimistic update of the saved state
            if (this.dataset.saved === 'true') {
                this.dataset.saved = 'false'
                this.setIcon(false)
            } else {
                this.dataset.saved = 'true'
                this.setIcon(true)
            }

            if (this.dataset.sessionId) {
                this.toggleSession()
            }
        }

        async saveSession() {
            if (this.user) {
                const userRef = doc(this.db, 'users', this.user.uid)
                const docSnap = await getDoc(userRef)

                if (docSnap.exists()) {
                    await updateDoc(userRef, { sessions: arrayUnion(this.dataset.sessionId) })
                } else {
                    await setDoc(userRef, { sessions: [this.dataset.sessionId] }, { merge: true })
                }
            }
        }

        async removeSession() {
            if (this.user) {
                const userRef = doc(this.db, 'users', this.user.uid)
                await updateDoc(userRef, { sessions: arrayRemove(this.dataset.sessionId) })
            }
        }

        async toggleSession() {
            try {
                if (await this.isSessionSaved()) {
                    await this.removeSession()
                } else {
                    await this.saveSession()
                }
            } catch (error) {
                console.error('Error toggling session:', error)
            }
        }

        async isSessionSaved() {
            if (this.user) {
                const userRef = doc(this.db, 'users', this.user.uid)
                const userDoc = await getDoc(userRef)
                const sessions = userDoc.data()?.sessions || []
                return sessions.includes(this.dataset.sessionId)
            }
            return false
        }
    }

    customElements.define('session-item-bookmark', SessionItemBookmark)
</script>

<style>
    .schedule-session {
        position: relative;
        display: block;

        background-color: var(--background);
        border-radius: var(--s-3);
        border: 1px solid var(--line);
        padding: var(--s0);
        overflow: hidden;
        width: 100%;
        height: 100%;
        transition: all var(--animation);

        h3 a {
            text-decoration: none;
            color: var(--brand-solid);
            transition: color var(--animation);

            &:hover {
                color: var(--brand-solid-hover);
                text-decoration: underline;
            }
        }
    }

    .schedule-session-extra-info {
        display: block;

        @media (min-width: 912px) {
            display: none;
        }
    }

    session-item-bookmark {
        position: absolute;
        top: var(--s-3);
        right: var(--s-3);

        @media (min-width: 912px) {
            opacity: 0;
        }

        &[data-saved='true'],
        .schedule-session:hover & {
            opacity: 1;
        }
    }

    .schedule-session-save-button {
        border: 0;
        background: transparent;
        cursor: pointer;
        padding: 0;
        margin: 0;
    }
</style>
