---
// import LEGAL_DATA from '../../config/legal.json';
---

<!-- Banni√®re de consentement des cookies -->
<div
    id="cookie-consent-banner"
    class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50 transform translate-y-full transition-all duration-500 ease-in-out">
    <div class="container mx-auto px-4 py-6 max-w-7xl">
        <div class="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-4">
            <!-- Contenu principal -->
            <div class="flex-1">
                <div class="flex items-start space-x-3">
                    <div class="text-2xl">üç™</div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Gestion des cookies</h3>
                        <p class="text-gray-600 text-sm mb-3">
                            Nous utilisons des cookies pour am√©liorer votre exp√©rience sur notre site. Certains sont
                            essentiels au fonctionnement, d'autres nous aident √† comprendre comment vous utilisez notre
                            site.
                        </p>
                        <a href="/legal/cookies" class="text-blue-600 hover:text-blue-800 underline text-sm">
                            En savoir plus sur notre politique des cookies
                        </a>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="flex flex-col sm:flex-row gap-3 lg:ml-6">
                <button
                    id="reject-cookies"
                    class="px-6 py-2 text-gray-700 bg-gray-100 border border-gray-300 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium">
                    ‚ùå Rejeter les cookies non-essentiels
                </button>

                <button
                    id="accept-all-cookies"
                    class="px-6 py-2 text-white bg-blue-600 border border-blue-600 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
                    ‚úÖ Accepter tous les cookies
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Toast -->
<div
    id="cookie-notification"
    class="fixed top-4 right-4 bg-green-600 text-white px-6 py-4 rounded-lg shadow-lg z-50 transform translate-x-full transition-all duration-300 ease-in-out opacity-0">
    <div class="flex items-center space-x-3">
        <div class="text-xl">‚úÖ</div>
        <div>
            <div class="font-medium" id="notification-title">Pr√©f√©rences mises √† jour</div>
            <div class="text-green-100 text-sm" id="notification-message">Vos pr√©f√©rences ont √©t√© sauvegard√©es</div>
        </div>
    </div>
</div>

<script>
    // Types pour TypeScript
    interface ConsentData {
        essential: boolean
        analytics: boolean
        functional: boolean
        timestamp?: string
        version?: string
    }

    type NotificationType = 'success' | 'info' | 'warning' | 'error'

    // Configuration des cookies par d√©faut (supprim√©e car non utilis√©e)

    // √âl√©ments DOM
    const banner = document.getElementById('cookie-consent-banner')
    const notification = document.getElementById('cookie-notification')

    // Boutons de la banni√®re
    const acceptAllBtn = document.getElementById('accept-all-cookies')
    const rejectBtn = document.getElementById('reject-cookies')

    // Fonction pour obtenir les pr√©f√©rences stock√©es
    function getStoredConsent(): ConsentData | null {
        try {
            const stored = localStorage.getItem('cookie-consent')
            return stored ? JSON.parse(stored) : null
        } catch (e) {
            return null
        }
    }

    // Fonction pour sauvegarder les pr√©f√©rences
    function saveConsent(consent: ConsentData): ConsentData {
        const consentData: ConsentData = {
            ...consent,
            timestamp: new Date().toISOString(),
            version: '1.0',
        }

        localStorage.setItem('cookie-consent', JSON.stringify(consentData))

        // Appliquer les pr√©f√©rences
        applyCookieSettings(consent)

        return consentData
    }

    // Fonction pour appliquer les param√®tres de cookies
    function applyCookieSettings(consent: ConsentData): void {
        // Analytics (Plausible)
        if (consent.analytics) {
            // Activer Plausible Analytics
            localStorage.removeItem('plausible_ignore')
        } else {
            // D√©sactiver Plausible Analytics
            localStorage.setItem('plausible_ignore', 'true')
        }
    }

    // Fonction pour afficher une notification
    function showNotification(title: string, message: string, type: NotificationType = 'success'): void {
        const notificationTitle = document.getElementById('notification-title')
        const notificationMessage = document.getElementById('notification-message')

        if (!notification || !notificationTitle || !notificationMessage) {
            console.error('Notification elements not found')
            return
        }

        // Couleurs selon le type
        const colors: Record<NotificationType, string> = {
            success: 'bg-green-600',
            info: 'bg-blue-600',
            warning: 'bg-yellow-600',
            error: 'bg-red-600',
        }

        // Ic√¥nes selon le type
        const icons: Record<NotificationType, string> = {
            success: '‚úÖ',
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
        }

        // Mettre √† jour le contenu
        notificationTitle.textContent = title
        notificationMessage.textContent = message

        // Mettre √† jour les couleurs
        notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 ease-in-out`

        // Mettre √† jour l'ic√¥ne
        const icon = notification.querySelector('.text-xl')
        if (icon) icon.textContent = icons[type]

        // Afficher
        notification.classList.remove('translate-x-full', 'opacity-0')
        notification.classList.add('translate-x-0', 'opacity-100')

        // Masquer apr√®s 4 secondes
        setTimeout(() => {
            if (notification) {
                notification.classList.add('translate-x-full', 'opacity-0')
                notification.classList.remove('translate-x-0', 'opacity-100')
            }
        }, 4000)
    }

    // Fonction pour afficher la banni√®re
    function showBanner(): void {
        if (!banner) return
        banner.classList.remove('translate-y-full')
        banner.classList.add('translate-y-0')
    }

    // Fonction pour masquer la banni√®re
    function hideBanner(): void {
        if (!banner) return
        banner.classList.add('translate-y-full')
        banner.classList.remove('translate-y-0')
    }

    // Gestionnaires d'√©v√©nements
    acceptAllBtn?.addEventListener('click', () => {
        saveConsent({
            essential: true,
            analytics: true,
            functional: true,
        })

        hideBanner()
        showNotification('Cookies accept√©s', 'Tous les cookies ont √©t√© accept√©s')
    })

    rejectBtn?.addEventListener('click', () => {
        saveConsent({
            essential: true,
            analytics: false,
            functional: false,
        })

        hideBanner()
        showNotification('Cookies limit√©s', 'Seuls les cookies essentiels ont √©t√© accept√©s', 'info')
    })

    // Initialisation au chargement de la page
    document.addEventListener('DOMContentLoaded', () => {
        const storedConsent = getStoredConsent()

        if (!storedConsent) {
            // Pas de consentement stock√©, afficher la banni√®re
            setTimeout(() => showBanner(), 1000)
        } else {
            // Appliquer les pr√©f√©rences existantes
            applyCookieSettings(storedConsent)
        }
    })
</script>

<style>
    /* Styles pour les transitions fluides */
    #cookie-consent-banner {
        will-change: transform;
    }

    #cookie-notification {
        will-change: transform, opacity;
    }

    /* Animation pour les notifications */
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
</style>
