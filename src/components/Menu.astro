---
import { SOCIAL_DATA, EVENT_DATA } from '../config'
import AccessibleEmoji from './ui-elements/AccessibleEmoji.astro'

const navigation = [
    { label: 'CFP', route: '/cfp' },
    { label: '√âquipe', route: '/team' },
    { label: 'Partenaires', route: '/sponsors' },
    { label: 'Code de conduite', route: '/coc' },
    { label: 'Lieu', route: '/location' },
    // { label: 'Programme', route: '/schedule' },
    // { label: 'Blog', route: '/blog' },
]

const routeName = Astro.url.pathname
const socialNetworks = SOCIAL_DATA.networks

const isActiveRoute = (route: string) => {
    if (route === '/') {
        return route === routeName
    }

    return routeName.startsWith(route)
}
---

<header
    id="site-header"
    class={`fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 ${routeName === '/' ? 'bg-black/20 backdrop-blur-sm border-b-0 md:bg-transparent md:backdrop-blur-none' : 'bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'}`}
    data-transparent={routeName === '/'}>
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-20">
            <!-- Logo -->
            <div class="flex-shrink-0">
                {
                    routeName === '/' && (
                        <span class="text-3xl font-black text-white drop-shadow-lg">{EVENT_DATA.event.shortName}</span>
                    )
                }
                {
                    routeName !== '/' && (
                        <a
                            href="/"
                            class="text-3xl font-black text-gradient hover:opacity-80 transition-opacity"
                            aria-label="Retour √† la page d'accueil">
                            {EVENT_DATA.event.shortName}
                        </a>
                    )
                }
            </div>

            <!-- Desktop Navigation -->
            <nav class="hidden md:flex items-center space-x-8">
                {
                    navigation.map((nav) => (
                        <a
                            href={nav.route}
                            class={`text-base font-semibold transition-colors duration-200 ${
                                routeName === '/'
                                    ? isActiveRoute(nav.route)
                                        ? 'text-white border-b-2 border-white pb-1'
                                        : 'text-white/90 hover:text-white/80'
                                    : isActiveRoute(nav.route)
                                      ? 'text-primary-600 border-b-2 border-primary-600 pb-1'
                                      : 'text-gray-700 hover:text-primary-600'
                            }`}>
                            {nav.label}
                        </a>
                    ))
                }
            </nav>

            <!-- Mobile menu button -->
            <div class="md:hidden mr-5">
                <input type="checkbox" id="nav-trigger" class="sr-only" />
                <label
                    for="nav-trigger"
                    class={`flex items-center justify-center w-12 h-12 rounded-lg transition-colors cursor-pointer ${
                        routeName === '/' ? 'hover:bg-white/20' : 'hover:bg-gray-100'
                    }`}
                    aria-label="Ouvrir le menu de navigation"
                    aria-expanded="false"
                    aria-controls="mobile-menu"
                    role="button"
                    tabindex="0">
                    <svg
                        class={`w-7 h-7 ${routeName === '/' ? 'text-white' : 'text-gray-700'}`}
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24">
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </label>

                <!-- Mobile Navigation Overlay -->
                <div
                    class="nav-overlay fixed inset-0 bg-black/50 opacity-0 transition-opacity duration-300 ease-in-out z-50 pointer-events-none">
                </div>

                <!-- Mobile Navigation Drawer -->
                <div
                    id="mobile-menu"
                    class="nav-drawer fixed inset-y-0 right-0 w-80 bg-white shadow-2xl transform translate-x-full transition-transform duration-500 ease-out z-60"
                    role="dialog"
                    aria-modal="true"
                    aria-labelledby="mobile-menu-title">
                    <div class="flex flex-col h-full">
                        <div class="bg-gradient-to-r from-primary-600 to-secondary-600 p-6">
                            <div class="flex items-center justify-between">
                                <div>
                                    <span id="mobile-menu-title" class="text-2xl font-black text-white"
                                        >{EVENT_DATA.event.shortName}</span
                                    >
                                    <p class="text-primary-100 text-sm mt-1">
                                        {EVENT_DATA.event.location.city}
                                        {EVENT_DATA.event.year}
                                    </p>
                                </div>
                                <label
                                    for="nav-trigger"
                                    class="w-12 h-12 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors cursor-pointer"
                                    aria-label="Fermer le menu">
                                    <svg
                                        class="w-6 h-6 text-white"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </label>
                            </div>
                        </div>
                        <nav
                            class="flex-1 px-0 py-0 space-y-0 bg-white"
                            role="navigation"
                            aria-label="Navigation principale mobile">
                            {
                                navigation.map((nav, index) => (
                                    <a
                                        href={nav.route}
                                        class={`flex items-center px-6 py-5 text-lg font-semibold transition-all duration-300 border-b border-gray-100 hover:bg-gradient-to-r hover:from-primary-50 hover:to-secondary-50 group ${
                                            isActiveRoute(nav.route)
                                                ? 'bg-gradient-to-r from-primary-100 to-secondary-100 text-primary-600'
                                                : 'text-gray-700 hover:text-primary-600'
                                        }`}
                                        style={`animation-delay: ${index * 0.1}s`}>
                                        <span class="mr-4 text-xl group-hover:animate-bounce-gentle">
                                            {nav.route === '/cfp' && <AccessibleEmoji emoji="üé§" label="Microphone" />}
                                            {nav.route === '/team' && <AccessibleEmoji emoji="üë•" label="√âquipe" />}
                                            {nav.route === '/sponsors' && (
                                                <AccessibleEmoji emoji="ü§ù" label="Partenaires" />
                                            )}
                                            {nav.route === '/coc' && (
                                                <AccessibleEmoji emoji="ü§ù" label="Code de conduite" />
                                            )}
                                            {nav.route === '/location' && <AccessibleEmoji emoji="üìç" label="Lieu" />}
                                        </span>
                                        {nav.label}
                                        <svg
                                            class="w-5 h-5 ml-auto text-gray-400 group-hover:text-primary-600 transition-colors"
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M9 5l7 7-7 7"
                                            />
                                        </svg>
                                    </a>
                                ))
                            }
                        </nav>

                        <!-- Footer du menu -->
                        <div class="p-6 border-t border-gray-100 bg-gray-50">
                            <div class="text-center">
                                <p class="text-sm text-gray-500 mb-3">Rejoignez la r√©volution tech</p>
                                <div class="flex justify-center space-x-3">
                                    <a
                                        href={`mailto:${SOCIAL_DATA.contact.general}`}
                                        class="w-10 h-10 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center hover:bg-primary-200 transition-colors"
                                        title="Email">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path
                                                d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"
                                            ></path>
                                            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                                        </svg>
                                    </a>
                                    {
                                        socialNetworks
                                            .filter((network) =>
                                                ['discord', 'twitter', 'linkedin'].includes(network.id)
                                            )
                                            .map((network) => (
                                                <a
                                                    href={network.url}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    class={`w-10 h-10 rounded-full flex items-center justify-center transition-colors hover:scale-110 transform`}
                                                    style={`background-color: ${network.color}20; color: ${network.color};`}
                                                    title={network.description}>
                                                    <span class="text-lg">{network.icon}</span>
                                                </a>
                                            ))
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    // Handle header visibility on scroll for all pages
    function updateHeaderOnScroll() {
        const header = document.querySelector('#site-header') as HTMLElement
        if (header) {
            const isHomepage = window.location.pathname === '/'
            const isScrolled = window.scrollY > 0

            // Detect mobile device
            const isMobile = window.innerWidth < 768

            header.dataset.transparent = (!isScrolled && isHomepage).toString()

            if (isHomepage) {
                if (isScrolled) {
                    // Scrolled on homepage - show solid background
                    header.className =
                        'fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'
                } else {
                    // Top of homepage - semi-transparent on mobile, transparent on desktop
                    header.className = `fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 ${isMobile ? 'bg-black/20 backdrop-blur-sm border-b-0' : 'bg-transparent border-b-0'}`
                }
            } else {
                // Other pages - always solid background
                header.className =
                    'fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'
            }
        }
    }

    window.addEventListener('scroll', updateHeaderOnScroll)
    window.addEventListener('resize', updateHeaderOnScroll) // Update on resize for mobile/desktop detection

    // Handle mobile menu avec support accessibilit√©
    document.addEventListener('astro:page-load', () => {
        const trigger = document.querySelector('#nav-trigger') as HTMLInputElement
        const triggerLabel = document.querySelector('label[for="nav-trigger"]') as HTMLLabelElement
        const drawer = document.querySelector('.nav-drawer') as HTMLElement
        const overlay = document.querySelector('.nav-overlay') as HTMLElement

        if (trigger && triggerLabel && drawer && overlay) {
            // Fonction pour ouvrir/fermer le menu
            function toggleMenu(open: boolean) {
                trigger.checked = open
                triggerLabel.setAttribute('aria-expanded', open.toString())

                if (open) {
                    drawer.style.transform = 'translateX(0)'
                    overlay.style.opacity = '1'
                    overlay.style.pointerEvents = 'auto'
                    document.body.style.overflow = 'hidden'

                    // Focus sur le premier √©l√©ment du menu
                    const firstLink = drawer.querySelector('a') as HTMLElement
                    if (firstLink) {
                        setTimeout(() => firstLink.focus(), 100)
                    }
                } else {
                    drawer.style.transform = 'translateX(100%)'
                    overlay.style.opacity = '0'
                    overlay.style.pointerEvents = 'none'
                    document.body.style.overflow = ''

                    // Retour du focus au bouton trigger
                    triggerLabel.focus()
                }
            }

            // Gestion du changement de state
            trigger.addEventListener('change', () => {
                toggleMenu(trigger.checked)
            })

            // Support navigation clavier sur le label
            triggerLabel.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault()
                    trigger.click()
                }
            })

            // Fermer avec ESC
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && trigger.checked) {
                    toggleMenu(false)
                }
            })

            // Gestion du focus trap dans le menu
            drawer.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    const focusableElements = drawer.querySelectorAll(
                        'a, button, label, [tabindex]:not([tabindex="-1"])'
                    )
                    const firstElement = focusableElements[0] as HTMLElement
                    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement

                    if (e.shiftKey) {
                        // Shift + Tab - focus vers l'arri√®re
                        if (document.activeElement === firstElement) {
                            e.preventDefault()
                            lastElement.focus()
                        }
                    } else {
                        // Tab - focus vers l'avant
                        if (document.activeElement === lastElement) {
                            e.preventDefault()
                            firstElement.focus()
                        }
                    }
                }
            })

            // Fermer le menu en cliquant sur l'overlay
            overlay.addEventListener('click', () => {
                toggleMenu(false)
            })

            // Fermer le menu lors de la navigation
            drawer.querySelectorAll('a').forEach((link) => {
                link.addEventListener('click', () => {
                    toggleMenu(false)
                })
            })
        }
    })
</script>
