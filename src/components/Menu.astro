---
import { SOCIAL_DATA, EVENT_DATA, MENU_CONFIG } from '../config'
import type { MenuItemConfig } from '../config'
import AccessibleEmoji from './ui-elements/AccessibleEmoji.astro'
import PrimaryCTA from './cta/PrimaryCTA.astro'

// Filtrer les éléments de menu activés et les trier par ordre
const navigation: MenuItemConfig[] = MENU_CONFIG.filter((item: MenuItemConfig) => item.enabled).sort(
    (a: MenuItemConfig, b: MenuItemConfig) => a.order - b.order
)

const routeName = Astro.url.pathname
const socialNetworks = SOCIAL_DATA.networks

const isActiveRoute = (route: string) => {
    if (route === '/') {
        return route === routeName
    }

    return routeName.startsWith(route)
}
---

<header
    id="site-header"
    class={`fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 ${routeName === '/' ? 'bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm md:bg-transparent md:backdrop-blur-none md:border-b-0 md:shadow-none' : 'bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'}`}
    data-transparent={routeName === '/'}>
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-20">
            <!-- Logo -->
            <div class="flex-shrink-0">
                <a
                    href="/"
                    aria-label="Retour à la page d'accueil"
                    class={`text-3xl font-black cursor-pointer ${
                        routeName === '/'
                            ? 'text-gradient drop-shadow-lg'
                            : 'text-gradient hover:opacity-80 transition-opacity'
                    }`}>
                    {EVENT_DATA.event.shortName}
                </a>
            </div>

            <!-- Desktop Navigation -->
            <nav id="desktop-nav" class="hidden md:flex items-center space-x-8">
                {
                    navigation.map((nav) => (
                        <a
                            href={nav.route}
                            class={`text-base font-semibold transition-colors duration-200 ${
                                routeName === '/'
                                    ? isActiveRoute(nav.route)
                                        ? 'text-white border-b-2 border-white pb-1'
                                        : 'text-white/90 hover:text-white/80'
                                    : isActiveRoute(nav.route)
                                      ? 'text-primary-600 border-b-2 border-primary-600 pb-1'
                                      : 'text-gray-700 hover:text-primary-600'
                            }`}>
                            {nav.label}
                        </a>
                    ))
                }
            </nav>

            <!-- Desktop CTA -->
            <div class="hidden md:block">
                <PrimaryCTA />
            </div>

            <!-- Mobile menu button -->
            <div class="md:hidden">
                <input type="checkbox" id="nav-trigger" class="sr-only" />
                <label
                    for="nav-trigger"
                    class={`flex items-center justify-center w-11 h-11 rounded-xl transition-all duration-200 cursor-pointer ${
                        routeName === '/'
                            ? 'hover:bg-white/20 active:bg-white/30'
                            : 'hover:bg-gray-100 active:bg-gray-200'
                    }`}
                    aria-label="Ouvrir le menu de navigation"
                    aria-expanded="false"
                    aria-controls="mobile-menu"
                    role="button"
                    tabindex="0">
                    <!-- Hamburger animé -->
                    <div class="relative w-6 h-6">
                        <span class={`hamburger-line top-1 ${routeName === '/' ? 'bg-white' : 'bg-gray-700'}`}></span>
                        <span class={`hamburger-line top-2.5 ${routeName === '/' ? 'bg-white' : 'bg-gray-700'}`}></span>
                        <span class={`hamburger-line top-4 ${routeName === '/' ? 'bg-white' : 'bg-gray-700'}`}></span>
                    </div>
                </label>

                <!-- Mobile Navigation Overlay -->
                <div
                    class="nav-overlay fixed inset-0 bg-black/50 opacity-0 transition-opacity duration-200 ease-in-out z-[10000] pointer-events-none">
                </div>

                <!-- Mobile Navigation Drawer -->
                <div
                    id="mobile-menu"
                    class="nav-drawer fixed inset-0 h-dvh w-screen max-w-full bg-gradient-to-b from-white/95 via-primary-50/20 to-secondary-50/20 backdrop-blur-md shadow-2xl transform translate-x-full transition-transform duration-200 ease-out z-[10001]"
                    role="dialog"
                    aria-modal="true"
                    aria-labelledby="mobile-menu-title">
                    <div class="flex flex-col h-full min-h-0">
                        <!-- Header simplifié -->
                        <div
                            class="bg-gradient-to-r from-primary-600 to-secondary-600 p-5 pt-[max(env(safe-area-inset-top),1.25rem)] pl-[max(env(safe-area-inset-left),1.25rem)] pr-[max(env(safe-area-inset-right),1.25rem)]">
                            <div class="flex items-center justify-between overflow-visible">
                                <div>
                                    <span id="mobile-menu-title" class="text-xl font-black text-white"
                                        >{EVENT_DATA.event.shortName}</span
                                    >
                                    <p class="text-primary-100 text-xs mt-0.5">
                                        {EVENT_DATA.event.location.city}
                                        {EVENT_DATA.event.year}
                                    </p>
                                </div>
                                <label
                                    for="nav-trigger"
                                    class="w-14 h-14 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 transition-all duration-200 cursor-pointer shrink-0"
                                    aria-label="Fermer le menu">
                                    <svg
                                        class="w-6 h-6 text-white"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24">
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </label>
                            </div>
                        </div>

                        <div
                            class="flex-1 overflow-y-auto bg-gradient-to-b from-white/95 via-gray-50 to-white/95 backdrop-blur-sm">
                            <!-- CTA Principal -->
                            <div
                                class="px-5 py-4 bg-gradient-to-r from-primary-50 to-secondary-50 border-b border-gray-100">
                                <div class="block w-full">
                                    <PrimaryCTA />
                                </div>
                            </div>
                            <nav
                                class="px-0 py-2 space-y-0 bg-white/95 shadow-sm ring-1 ring-black/5"
                                role="navigation"
                                aria-label="Navigation principale mobile">
                                {
                                    navigation.map((nav, index) => (
                                        <a
                                            href={nav.route}
                                            class={`flex items-center px-5 py-4 text-base font-medium transition-all duration-200 border-b border-gray-50 hover:bg-gradient-to-r hover:from-primary-50 hover:to-secondary-50 group active:bg-primary-100 ${
                                                isActiveRoute(nav.route)
                                                    ? 'bg-gradient-to-r from-primary-100 to-secondary-100 text-primary-600 border-l-4 border-l-primary-600'
                                                    : 'text-gray-700 hover:text-primary-600'
                                            }`}
                                            style={`animation-delay: ${index * 0.05}s`}>
                                            <span class="mr-3 text-lg group-hover:scale-110 transition-transform duration-200">
                                                <AccessibleEmoji emoji={nav.icon} label={nav.description} />
                                            </span>
                                            <span class="flex-1">{nav.label}</span>
                                            <svg
                                                class="w-4 h-4 text-gray-400 group-hover:text-primary-600 group-hover:translate-x-1 transition-all duration-200"
                                                fill="none"
                                                stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M9 5l7 7-7 7"
                                                />
                                            </svg>
                                        </a>
                                    ))
                                }
                            </nav>

                            <!-- Footer simplifié -->
                            <div
                                class="p-5 pb-[env(safe-area-inset-bottom)] border-t border-gray-100 bg-gradient-to-b from-gray-50 via-white to-white">
                                <div class="text-center space-y-3">
                                    <p class="text-xs text-gray-500 font-medium">Rejoignez la révolution tech</p>
                                    <div class="flex justify-center space-x-4">
                                        <a
                                            href={`mailto:${SOCIAL_DATA.contact.general}`}
                                            class="w-12 h-12 bg-primary-100 text-primary-600 rounded-lg flex items-center justify-center hover:bg-primary-200 hover:scale-105 transition-all duration-200"
                                            title="Nous contacter">
                                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                                <path
                                                    d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"
                                                ></path>
                                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"
                                                ></path>
                                            </svg>
                                        </a>
                                        {
                                            socialNetworks
                                                .filter((network) => ['discord', 'linkedin'].includes(network.id))
                                                .slice(0, 2)
                                                .map((network) => (
                                                    <a
                                                        href={network.url}
                                                        target="_blank"
                                                        rel="noopener noreferrer"
                                                        class={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-200 hover:scale-105`}
                                                        style={`background-color: ${network.color}15; color: ${network.color};`}
                                                        title={network.description}>
                                                        <span class="text-lg">{network.icon}</span>
                                                    </a>
                                                ))
                                        }
                                    </div>
                                    <p class="text-xs text-gray-400">© 2026 Tech'Work Lyon</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<style>
    /* Animation du hamburger */
    .hamburger-line {
        @apply absolute left-0 w-full h-0.5 rounded-full transition-all duration-300 ease-in-out;
    }

    /* État ouvert du hamburger */
    #nav-trigger:checked ~ label .hamburger-line:nth-child(1) {
        @apply top-2.5 rotate-45;
    }

    #nav-trigger:checked ~ label .hamburger-line:nth-child(2) {
        @apply opacity-0;
    }

    #nav-trigger:checked ~ label .hamburger-line:nth-child(3) {
        @apply top-2.5 -rotate-45;
    }

    /* Animation d'entrée des éléments du menu */
    .nav-drawer a {
        animation: slideInFromRight 0.3s ease-out forwards;
        opacity: 0;
        transform: translateX(20px);
    }

    @keyframes slideInFromRight {
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* Amélioration du focus visible */
    .nav-drawer a:focus,
    label[for='nav-trigger']:focus {
        @apply outline-none ring-2 ring-primary-500 ring-offset-2;
    }
</style>

<script>
    // Handle header visibility on scroll for all pages
    function isRouteActive(route: string, path: string): boolean {
        if (!route) return false
        if (route === '/') return path === '/'
        return path.startsWith(route)
    }

    function applyHomepageHeaderTextStyles(isScrolled: boolean) {
        const header = document.querySelector('#site-header') as HTMLElement | null
        if (!header) return
        const logo = header.querySelector('div.flex-shrink-0 a') as HTMLElement | null
        const navLinks = header.querySelectorAll('#desktop-nav a')
        const mobileLabel = header.querySelector('label[for="nav-trigger"]') as HTMLElement | null
        const hamburgerLines = header.querySelectorAll('.hamburger-line')
        const path = window.location.pathname

        // Logo
        if (logo) {
            logo.className = `text-3xl font-black cursor-pointer ${
                isScrolled ? 'text-gradient hover:opacity-80 transition-opacity' : 'text-gradient drop-shadow-lg'
            }`
        }

        // Desktop nav links
        navLinks.forEach((linkEl) => {
            const link = linkEl as HTMLAnchorElement
            const href = link.getAttribute('href') || ''
            const active = isRouteActive(href, path)
            if (isScrolled) {
                link.className = `text-base font-semibold transition-colors duration-200 ${
                    active
                        ? 'text-primary-600 border-b-2 border-primary-600 pb-1'
                        : 'text-gray-700 hover:text-primary-600'
                }`
            } else {
                link.className = `text-base font-semibold transition-colors duration-200 ${
                    active ? 'text-white border-b-2 border-white pb-1' : 'text-white/90 hover:text-white/80'
                }`
            }
        })

        // Mobile trigger label (button background hover)
        if (mobileLabel) {
            mobileLabel.className =
                'flex items-center justify-center w-11 h-11 rounded-xl transition-all duration-200 cursor-pointer ' +
                (isScrolled ? 'hover:bg-gray-100 active:bg-gray-200' : 'hover:bg-white/20 active:bg-white/30')
        }

        // Hamburger icon lines color
        hamburgerLines.forEach((line) => {
            const el = line as HTMLElement
            el.classList.remove('bg-white', 'bg-gray-700')
            el.classList.add(isScrolled ? 'bg-gray-700' : 'bg-white')
        })
    }

    function updateHeaderOnScroll() {
        const header = document.querySelector('#site-header') as HTMLElement
        if (header) {
            const isHomepage = window.location.pathname === '/'
            const isScrolled = window.scrollY > 0

            // Detect mobile device
            const isMobile = window.innerWidth < 768

            header.dataset.transparent = (!isScrolled && isHomepage).toString()

            if (isHomepage) {
                if (isScrolled) {
                    // Scrolled on homepage - show solid background
                    header.className =
                        'fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'
                } else {
                    // Top of homepage - semi-transparent on mobile, transparent on desktop
                    header.className = `fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 ${
                        isMobile
                            ? 'bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'
                            : 'bg-transparent border-b-0'
                    }`
                }

                // Ensure text colors are readable on homepage
                applyHomepageHeaderTextStyles(isScrolled || isMobile)
            } else {
                // Other pages - always solid background
                header.className =
                    'fixed top-0 left-0 right-0 z-[9999] transition-all duration-300 bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-sm'
            }
        }
    }

    window.addEventListener('scroll', updateHeaderOnScroll, { passive: true })
    window.addEventListener('resize', updateHeaderOnScroll)
    document.addEventListener('astro:page-load', updateHeaderOnScroll)

    // Handle mobile menu avec support accessibilité
    document.addEventListener('astro:page-load', () => {
        const trigger = document.querySelector('#nav-trigger') as HTMLInputElement
        const triggerLabel = document.querySelector('label[for="nav-trigger"]') as HTMLLabelElement
        const drawer = document.querySelector('.nav-drawer') as HTMLElement
        const overlay = document.querySelector('.nav-overlay') as HTMLElement

        if (trigger && triggerLabel && drawer && overlay) {
            // Fonction pour ouvrir/fermer le menu
            function toggleMenu(open: boolean) {
                trigger.checked = open
                triggerLabel.setAttribute('aria-expanded', open.toString())

                if (open) {
                    drawer.style.transform = 'translateX(0)'
                    overlay.style.opacity = '1'
                    overlay.style.pointerEvents = 'auto'
                    document.body.style.overflow = 'hidden'

                    // Focus sur le premier élément du menu
                    const firstLink = drawer.querySelector('a') as HTMLElement
                    if (firstLink) {
                        setTimeout(() => firstLink.focus(), 100)
                    }
                } else {
                    drawer.style.transform = 'translateX(100%)'
                    overlay.style.opacity = '0'
                    overlay.style.pointerEvents = 'none'
                    document.body.style.overflow = ''

                    // Retour du focus au bouton trigger
                    triggerLabel.focus()
                }
            }

            // Gestion du changement de state
            trigger.addEventListener('change', () => {
                toggleMenu(trigger.checked)
            })

            // Support navigation clavier sur le label
            triggerLabel.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault()
                    trigger.click()
                }
            })

            // Fermer avec ESC
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && trigger.checked) {
                    toggleMenu(false)
                }
            })

            // Gestion du focus trap dans le menu
            drawer.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    const focusableElements = drawer.querySelectorAll(
                        'a, button, label, [tabindex]:not([tabindex="-1"])'
                    )
                    const firstElement = focusableElements[0] as HTMLElement
                    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement

                    if (e.shiftKey) {
                        // Shift + Tab - focus vers l'arrière
                        if (document.activeElement === firstElement) {
                            e.preventDefault()
                            lastElement.focus()
                        }
                    } else {
                        // Tab - focus vers l'avant
                        if (document.activeElement === lastElement) {
                            e.preventDefault()
                            firstElement.focus()
                        }
                    }
                }
            })

            // Fermer le menu en cliquant sur l'overlay
            overlay.addEventListener('click', () => {
                toggleMenu(false)
            })

            // Fermer le menu lors de la navigation
            drawer.querySelectorAll('a').forEach((link) => {
                link.addEventListener('click', () => {
                    toggleMenu(false)
                })
            })
        }
    })
</script>
